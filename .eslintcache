[{"C:\\Users\\evgeh\\OneDrive\\Desktop\\repository\\art-repo\\src\\index.js":"1","C:\\Users\\evgeh\\OneDrive\\Desktop\\repository\\art-repo\\src\\reportWebVitals.js":"2","C:\\Users\\evgeh\\OneDrive\\Desktop\\repository\\art-repo\\src\\App.js":"3","C:\\Users\\evgeh\\OneDrive\\Desktop\\repository\\art-repo\\src\\components\\Example.js":"4","C:\\Users\\evgeh\\OneDrive\\Desktop\\repository\\art-repo\\src\\components\\Minter.js":"5","C:\\Users\\evgeh\\OneDrive\\Desktop\\repository\\art-repo\\src\\components\\SoldOut.js":"6","C:\\Users\\evgeh\\OneDrive\\Desktop\\repository\\art-repo\\src\\utils\\interact.js":"7"},{"size":501,"mtime":1645270534195,"results":"8","hashOfConfig":"9"},{"size":362,"mtime":499162500000,"results":"10","hashOfConfig":"9"},{"size":578,"mtime":1645279667236,"results":"11","hashOfConfig":"9"},{"size":503,"mtime":1645279649666,"results":"12","hashOfConfig":"9"},{"size":6335,"mtime":1645460593881,"results":"13","hashOfConfig":"9"},{"size":684,"mtime":1645367491202,"results":"14","hashOfConfig":"9"},{"size":3107,"mtime":1645458153718,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"576mf6",{"filePath":"19","messages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"18"},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"18"},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"18"},"C:\\Users\\evgeh\\OneDrive\\Desktop\\repository\\art-repo\\src\\index.js",[],["34","35"],"C:\\Users\\evgeh\\OneDrive\\Desktop\\repository\\art-repo\\src\\reportWebVitals.js",[],"C:\\Users\\evgeh\\OneDrive\\Desktop\\repository\\art-repo\\src\\App.js",[],"C:\\Users\\evgeh\\OneDrive\\Desktop\\repository\\art-repo\\src\\components\\Example.js",["36","37"],"import example_gif from '../examples.gif';\r\nimport example_gif2 from '../examples2.gif';\r\nimport './Example.scss';\r\n\r\n\r\nconst Example = (props)=>{\r\n    const className = \"example_holder \" + props.className;\r\n    let exmpl_gif;\r\n    if(props.num == 1){\r\n        exmpl_gif = example_gif;\r\n    }else{\r\n        exmpl_gif = example_gif2;\r\n    }\r\n    return(\r\n        <div className={className}>\r\n            <img className=\"example\" src={exmpl_gif}></img>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Example;","C:\\Users\\evgeh\\OneDrive\\Desktop\\repository\\art-repo\\src\\components\\Minter.js",["38","39","40","41","42","43","44","45","46","47","48"],"C:\\Users\\evgeh\\OneDrive\\Desktop\\repository\\art-repo\\src\\components\\SoldOut.js",["49"],"import robot_img from '../robot.png';\r\nimport './SoldOut.scss'\r\n\r\nconst SoldOut = ()=>{\r\n    const thx_txt = \"Oh my god! O_O This is sold out! \" + \r\n    \"Guys, I am so happy that you liked my drawings ^-^ \" + \r\n    \"I got a big portion of motivation to explore your world!\";\r\n\r\n    return(\r\n        <div className=\"container-fluid sold_out_holder\">\r\n            <div className=\"row\">\r\n                <div className=\"col-12\">\r\n                    {thx_txt}\r\n                </div>\r\n\r\n                <div className=\"col-4\">\r\n                    <img id=\"robot_img\" src={robot_img}></img>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SoldOut;","C:\\Users\\evgeh\\OneDrive\\Desktop\\repository\\art-repo\\src\\utils\\interact.js",["50","51"],"import Web3 from \"web3\";\r\n\r\nexport const web3 = new Web3(\"https://speedy-nodes-nyc.moralis.io/9fcfea6f5970d20ff23ae056/eth/rinkeby\");\r\n\r\nconst contractABI = require(\"../contract_abi.json\");\r\nconst contractAddress = \"0xfAB98F673273eFcA35A5e83C63758375ee31eC3D\";\r\n\r\n\r\nexport const mint = async (cost)=>{\r\n  const chainId = await window.ethereum.request({ method: 'eth_chainId' });\r\n\r\n  // if(chainId != 4){\r\n  //   return{ \r\n  //     success:false,\r\n  //     status: \"Switch to Rinkeby test network\"\r\n  //   }\r\n  // }\r\n\r\n  window.contract = await new web3.eth.Contract(contractABI, contractAddress);\r\n\r\n  cost = web3.utils.toWei(cost.toString() , \"ether\");\r\n\r\n  let gasLimit = 285000;\r\n\r\n  const transactionParams = {\r\n    gasLimit:String(gasLimit),\r\n    to: contractAddress, // Required except during contract publications.\r\n    from: window.ethereum.selectedAddress, // must match user's active address.\r\n    data: window.contract.methods.mint().encodeABI(),//make call to NFT smart contract \r\n    value:parseInt(cost).toString(16),\r\n  };\r\n\r\n  try{\r\n    const txHash = await window.ethereum\r\n      .request({\r\n        method: 'eth_sendTransaction',\r\n        params: [transactionParams]\r\n      });\r\n    \r\n      return{\r\n        success:true,\r\n        status: \"Thanks for buying my picture! Go check it on Opensea!\"\r\n      }\r\n\r\n  }catch (error){\r\n    return{\r\n      success:false,\r\n      status: \"You couldn't buy my picture :( \" + error.message\r\n    }\r\n  }\r\n\r\n}\r\n\r\nexport const getMaxSupply = async()=>{\r\n  window.contract = await new web3.eth.Contract(contractABI, contractAddress);\r\n  const maxSupply = await window.contract.methods.maxSupply().call();\r\n\r\n  return{\r\n    maxSupply:maxSupply\r\n  }\r\n}\r\n\r\nexport const getTotalSupply = async()=>{\r\n  window.contract = await new web3.eth.Contract(contractABI, contractAddress);\r\n  const totalSupply = await window.contract.methods.totalSupply().call();\r\n\r\n  return{\r\n    totalSupply:totalSupply\r\n  }\r\n}\r\n \r\n\r\n\r\nexport const connectWallet = async () => {\r\n  if (window.ethereum) {\r\n    try {\r\n      const addressArray = await window.ethereum.request({\r\n        method: \"eth_requestAccounts\",\r\n      });\r\n      const obj = {\r\n        status: \"Wallet connected!\",\r\n        address: addressArray[0],\r\n      };\r\n      return obj;\r\n    } catch (err) {\r\n      return {\r\n        address: \"\",\r\n        status: err.message,\r\n      };\r\n    }\r\n  } else {\r\n    return {\r\n      address: \"\",\r\n      status: \"Install Metamask\",\r\n    };\r\n  }\r\n};\r\n\r\nexport const getCurrentWalletConnected = async () => {\r\n  if (window.ethereum) {\r\n    try {\r\n      const addressArray = await window.ethereum.request({\r\n        method: \"eth_accounts\",\r\n      });\r\n      if (addressArray.length > 0) {\r\n        return {\r\n          address: addressArray[0],\r\n          status: \"\",\r\n        };\r\n      } else {\r\n        return {\r\n          address: \"\",\r\n          status: \"\",\r\n        };\r\n      }\r\n    } catch (err) {\r\n      return {\r\n        address: \"\",\r\n        status: err.message,\r\n      };\r\n    }\r\n  } else {\r\n    return {\r\n      address: \"\",\r\n      status: \"Install Metamask\",\r\n    };\r\n  }\r\n};",{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","severity":1,"message":"57","line":9,"column":18,"nodeType":"58","messageId":"59","endLine":9,"endColumn":20},{"ruleId":"60","severity":1,"message":"61","line":16,"column":13,"nodeType":"62","endLine":16,"endColumn":54},{"ruleId":"63","severity":1,"message":"64","line":19,"column":15,"nodeType":"65","endLine":25,"endColumn":6},{"ruleId":"66","severity":1,"message":"67","line":57,"column":12,"nodeType":"68","messageId":"69","endLine":57,"endColumn":27},{"ruleId":"66","severity":1,"message":"70","line":57,"column":29,"nodeType":"68","messageId":"69","endLine":57,"endColumn":47},{"ruleId":"66","severity":1,"message":"71","line":60,"column":12,"nodeType":"68","messageId":"69","endLine":60,"endColumn":21},{"ruleId":"66","severity":1,"message":"72","line":60,"column":23,"nodeType":"68","messageId":"69","endLine":60,"endColumn":35},{"ruleId":"66","severity":1,"message":"73","line":65,"column":16,"nodeType":"68","messageId":"69","endLine":65,"endColumn":23},{"ruleId":"63","severity":1,"message":"64","line":75,"column":15,"nodeType":"65","endLine":84,"endColumn":6},{"ruleId":"56","severity":1,"message":"57","line":78,"column":24,"nodeType":"58","messageId":"59","endLine":78,"endColumn":26},{"ruleId":"56","severity":1,"message":"57","line":89,"column":24,"nodeType":"58","messageId":"59","endLine":89,"endColumn":26},{"ruleId":"60","severity":1,"message":"61","line":101,"column":33,"nodeType":"62","endLine":101,"endColumn":69},{"ruleId":"56","severity":1,"message":"74","line":119,"column":29,"nodeType":"58","messageId":"59","endLine":119,"endColumn":31},{"ruleId":"60","severity":1,"message":"61","line":17,"column":21,"nodeType":"62","endLine":17,"endColumn":57},{"ruleId":"66","severity":1,"message":"75","line":10,"column":9,"nodeType":"68","messageId":"69","endLine":10,"endColumn":16},{"ruleId":"66","severity":1,"message":"76","line":34,"column":11,"nodeType":"68","messageId":"69","endLine":34,"endColumn":17},"no-native-reassign",["77"],"no-negated-in-lhs",["78"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","no-unused-vars","'walletConnected' is assigned a value but never used.","Identifier","unusedVar","'setWalletConnected' is assigned a value but never used.","'userPrice' is assigned a value but never used.","'setUserPrice' is assigned a value but never used.","'success' is assigned a value but never used.","Expected '!==' and instead saw '!='.","'chainId' is assigned a value but never used.","'txHash' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]